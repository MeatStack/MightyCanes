from selenium import webdriver
from selenium.webdriver.common.keys import Keys

# define browser
driver = webdriver.Chrome()

# open page
driver.get(" ")

# click forgot password button
ForgotPassword = driver.find_element_by_id("idForgotPassword")
ForgotPassword.click()

# back to login page
driver.back()

# click, clear and type login email
LoginEmail = driver.find_element_by_id("idEmailAddress")
LoginEmail.click()
LoginEmail.clear()
LoginEmail.send_keys(" ")

# click, clear and type login password
LoginPassword = driver.find_element_by_id("idPassword")
LoginPassword.click()
LoginPassword.clear()
LoginPassword.send_keys(" ")

# click login button
LoginButton = driver.find_element_by_id("loginButton")

if LoginButton.is_displayed():
    print("Login button is visible")
else:
    print("Login button is NOT visible")

LoginButton.click()

driver.implicitly_wait(10)

# verify the logo
LogoIcon = driver.find_element_by_xpath("//*[@alt=' ']")

if LogoIcon.is_displayed():
    print("Logo icon is visible")
else:
    print("Logo icon is NOT visible")

# verify the search bar
SearchBar = driver.find_element_by_id("idSearch")
SearchBar.click()
SearchBar.clear()
SearchBar.send_keys("big")
driver.implicitly_wait(10)

# verify POC status
PocStatus = driver.find_element_by_xpath("//*[@class = 'is-hidden-mobile is-primary is-right is-medium is-always is-multiline']")
PocStatus.click()

# clear search bar
SearchBar.click()
SearchBar.clear()

# client detail sorting

# verify dropdown menu bar
DropdownMenu = driver.find_element_by_id("idMenuButton")
DropdownMenu.click()

# verify support button
#SupportButton = driver.find_element_by_id("idSupportButton")
#SupportButton.click()

# verify change password button
ChangePassword = driver.find_element_by_id("idChangePasswordButton")
ChangePassword.click()

# cancel password change
PasswordChangeCancel = driver.find_element_by_id("idPasswordChangeCancel")
PasswordChangeCancel.click()
driver.implicitly_wait(10)

# verify logout button
DropdownMenu = driver.find_element_by_id("idMenuButton")
DropdownMenu.click()
LogoutButton = driver.find_element_by_id("logoutButton")
LogoutButton.click()
# -------------------------------------------------------------------------
import unittest
from IETessaTest.Src.Page_Object import Login
from selenium import webdriver
from time import sleep
import HtmlTestRunner


class TestLogin(unittest.TestCase):
    def setUp(self):
        self.driver = webdriver.Ie()
        self.driver.maximize_window()
        self.driver.implicitly_wait(5)
        self.base_url = 'https://tessaus.invacare-o2.com'
        self.driver.delete_cookie(self.base_url)

    def test_LoginSucceed(self):
        browser = self.driver
        browser.get(self.base_url)

        login = Login(browser)
        login.username('test@web.test')
        login.password('password')
        login.clickLogin()
        sleep(2)

    def test_Login_InvalidEmail(self):
        browser = self.driver
        browser.get(self.base_url)

        login = Login(browser)
        login.username('invalid@email.test')
        login.username('password')
        login.clickLogin()

        assert login.error() == 'Incorrect username or password.'
        sleep(2)

    def test_Login_InvalidPassword(self):
        browser = self.driver
        browser.get(self.base_url)

        login = Login(browser)
        login.username('test@web.test')
        login.password('invalidpassword')
        login.clickLogin()

        assert login.error() == 'Incorrect username or password.'

    def test_Login_InvalidEmailPassword(self):
        browser = self.driver
        browser.get(self.base_url)

        login = Login(browser)
        login.username('invalid@email.test')
        login.password('invalidpassword')
        login.clickLogin()

        assert login.error() == 'Incorrect username or password.'

    #def test_Login_EmptyEmail(self):



    def tearDown(self):
        self.driver.close()
        self.driver.quit()


if __name__ == "__main__":
    HtmlTestRunner.main()
